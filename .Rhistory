)
test_blank <- blank_values(df_blank) %>% names()
test_normal <- blank_values(df_normal)
# Test that blank_values create values if missing
expect_equal(test_blank, c('a', 'result', 'n', 'value', 'label'))
# If not missing, test that it doesn't overwrite the labels/values
expect_equal(df_normal, test_normal)
})
#### PRE- grouped internal functions ####
### blank_values
test_that("blank_values - creates value var", {
df_blank <- data.frame(
a = c(1:5),
result = rep(.2, 5),
n = rep(100, 5)
)
df_normal <- data.frame(
value = c(1:5),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
)
test_blank <- blank_values(df_blank) %>% names()
test_normal <- blank_values(df_normal)
# Test that blank_values create values if missing
expect_equal(test_blank, c('a', 'result', 'n', 'value', 'label'))
# If not missing, test that it doesn't overwrite the labels/values
expect_equal(df_normal, test_normal)
})
devtools::load_all()
#### PRE- grouped internal functions ####
### blank_values
test_that("blank_values - creates value var", {
df_blank <- data.frame(
a = c(1:5),
result = rep(.2, 5),
n = rep(100, 5)
)
df_normal <- data.frame(
value = c(1:5),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
)
test_blank <- blank_values(df_blank) %>% names()
test_normal <- blank_values(df_normal)
# Test that blank_values create values if missing
expect_equal(test_blank, c('a', 'result', 'n', 'value', 'label'))
# If not missing, test that it doesn't overwrite the labels/values
expect_equal(df_normal, test_normal)
})
### add_label
test_that("add_label", {
df_blank <- data.frame(
a = c(1:5),
result = rep(.2, 5),
n = rep(100, 5)
)
df_normal <- data.frame(
value = c(1:5),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
)
test_blank <- add_label(df_blank, label) %>% names()
test_normal <- add_label(df_normal, label) %>% names()
expect_equal(test_blank, c('a', 'result', 'n', 'value', 'label'))
expect_equal(test_normal, c('value', 'label', 'result', 'n'))
})
### add_group
test_that("add_group", {
df_ungrouped <- data.frame(
value = c(1:5),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5),
change = c(1, 1, 1, 2, 2)
) %>% add_group(grouped = FALSE, group_var = change, label_var = label)
df_grouped <- data.frame(
value = c(1:5),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5),
change = c(1, 1, 1, 2, 2)
) %>% add_group(grouped = TRUE, group_var = change, label_var = label)
test_ungrouped <- df_ungrouped %>% names()
test_grouped <- df_grouped %>% names()
expect_equal(test_ungrouped, c('value', 'label', 'result', 'n', 'change'))
expect_equal(test_grouped, c('value', 'label', 'result', 'n', 'change', 'group_var'))
})
### factors
# value = label
test_that("factors: value = label", {
df <- data.frame(
value = c('One', 'Two', 'Three', 'Four', 'Five'),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% factors(grouped = FALSE, group_var = NULL, label_var = label)
value_values <- unique(df$value)
expect_equal(value_values, c(1:5))
})
# value was non existant
test_that("factors: value was non existant", {
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% factors(grouped = FALSE, group_var = NULL, label_var = label)
value_values <- unique(df$value)
expect_equal(value_values, c(1:5))
})
# value = x, likely made that from missing values
test_that("factors: value = x", {
df <- tibble(
value = c(rep('x', 5)),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% factors(grouped = FALSE, group_var = NULL, label_var = label)
value_values <- unique(df$value)
expect_equal(value_values, c(1:5))
})
?factors
# value = x, likely made that from missing values
test_that("factors: value = x", {
df <- tibble::tibble(
value = c(rep('x', 5)),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% factors(grouped = FALSE, group_var = NULL, label_var = label)
value_values <- unique(df$value)
expect_equal(value_values, c(1:5))
})
# value = 3, out of order?
test_that("factors: value out of order", {
df <- tibble::tibble(
value = c(3, 2, 1, 4, 5),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% factors(grouped = FALSE, group_var = NULL, label_var = label)
value_values <- unique(df$value)
expect_equal(value_values, c(1:5))
})
### reverse_label (inherent order)
test_that("reverse_label: inherent order", {
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
values_rev <- purrr::as_vector(df_rev$value)
expect_equal(values, c(1:5))
expect_equal(values_rev, c(5:1))
})
### reverse_label_unordered
test_that("reverse_label_unordered", {
df <- tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>%
reverse_label_unordered(rev_label = FALSE)
values <- purrr::as_vector(df$label)
df_rev <- tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label_unordered(rev_label = TRUE)
values_rev <- purrr::as_vector(df_rev$label)
expect_equal(values, as.vector(c('One', 'Two', 'Three', 'Four', 'Five')))
expect_equal(values_rev, rev(as.vector(c('One', 'Two', 'Three', 'Four', 'Five'))))
})
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>%
reverse_label_unordered(rev_label = FALSE)
rm(df)
### reverse_label_unordered
test_that("reverse_label_unordered", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>%
reverse_label_unordered(rev_label = FALSE)
values <- purrr::as_vector(df$label)
df_rev <- tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label_unordered(rev_label = TRUE)
values_rev <- purrr::as_vector(df_rev$label)
expect_equal(values, as.vector(c('One', 'Two', 'Three', 'Four', 'Five')))
expect_equal(values_rev, rev(as.vector(c('One', 'Two', 'Three', 'Four', 'Five'))))
})
### reverse_label_unordered
test_that("reverse_label_unordered", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>%
reverse_label_unordered(rev_label = FALSE)
values <- purrr::as_vector(df$label)
df_rev <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label_unordered(rev_label = TRUE)
values_rev <- purrr::as_vector(df_rev$label)
expect_equal(values, as.vector(c('One', 'Two', 'Three', 'Four', 'Five')))
expect_equal(values_rev, rev(as.vector(c('One', 'Two', 'Three', 'Four', 'Five'))))
})
#### (1) Ungrouped Section ####
### Ungrouped1: label_first
test_that("Ungrouped1: label_first", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
) %>%
reverse_label(
grouped = FALSE,
group_var = FALSE,
label_var = label,
rev_label = FALSE
) %>%
ungrouped1(
specifically_ordered = TRUE,
inherent_order_label = FALSE,
label_first = 'Three'
)
values <- purrr::as_vector(df$label) %>% levels()
expect_equal(values, as.vector(c('Three', 'Five', 'Four', 'Two', 'One')))
})
### Ungrouped2: label_first, inherent_order
test_that("Ungrouped2: label_first, inherent_order", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
) %>%
reverse_label(
grouped = FALSE,
group_var = FALSE,
label_var = label,
rev_label = FALSE
) %>%
ungrouped2(
specifically_ordered = TRUE,
inherent_order_label = TRUE,
label_first = 'Three'
)
values <- purrr::as_vector(df$label) %>% levels()
expect_equal(values, as.vector(c('Three', 'One', 'Two', 'Four', 'Five')))
})
### Ungrouped3: stacked
test_that("Ungrouped3: stacked", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
) %>%
reverse_label(
grouped = FALSE,
group_var = FALSE,
label_var = label,
rev_label = FALSE
) %>%
ungrouped3(
stacked = 'gg'
)
values <- purrr::as_vector(df$label) %>% levels()
expect_equal(values, as.vector(c('Five', 'Four', 'Three', 'Two', 'One')))
})
### Ungrouped4: unordered
test_that("Ungrouped4: unordered", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
) %>%
reverse_label(
grouped = FALSE,
group_var = FALSE,
label_var = label,
rev_label = FALSE
) %>%
ungrouped4(
specifically_ordered = FALSE,
inherent_order_label = FALSE
)
values <- purrr::as_vector(df$label) %>% levels()
expect_equal(values, as.vector(c('Five', 'Four', 'Three', 'Two', 'One')))
})
### Ungrouped5: unordered
test_that("Ungrouped5: unordered", {
df <- tibble::tibble(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
) %>%
reverse_label(
grouped = FALSE,
group_var = FALSE,
label_var = label,
rev_label = FALSE
) %>%
ungrouped5(
specifically_ordered = FALSE,
inherent_order_label = TRUE
)
values <- purrr::as_vector(df$label) %>% levels()
expect_equal(values, as.vector(c('One', 'Two', 'Three', 'Four', 'Five')))
})
#### Grouping functions - not complete ####
### add_group
test_that("add_group", {
df_ungrouped <- data.frame(
label = rep(c('One', 'Two'), 2),
result = rep(.2, 4),
n = rep(100, 4),
group_var = c(1, 1, 2, 2)
) %>%
add_group(
grouped = TRUE,
group_var = group_var,
label_var = label
)
df_grouped <- data.frame(
label = rep(c('One', 'Two'), 2),
result = rep(.2, 4),
n = rep(100, 4),
group_var = c(1, 1, 2, 2)
) %>%
dplyr::group_by(group_var) %>%
add_group(
grouped = TRUE,
group_var = group_var,
label_var = label
)
expect_equal(df_ungrouped, df_grouped)
})
### factors
test_that("factors: is grouped", {
df_ungrouped <- tibble::tibble(
label = rep(c('One', 'Two'), 2),
result = rep(.2, 4),
n = rep(100, 4),
group_var = c(1, 1, 2, 2)
) %>% factors(grouped = TRUE, group_var = group_var, label_var = label)
df_grouped <- tibble::tibble(
label = rep(c('One', 'Two'), 2),
result = rep(.2, 4),
n = rep(100, 4),
group_var = c(1, 1, 2, 2)
) %>%
dplyr::group_by(group_var) %>%
factors(grouped = TRUE, group_var = group_var, label_var = label)
expect_equal(df_ungrouped, df_grouped)
})
### reverse_group
test_that("reverse_group", {
group_forward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = TRUE, group_var = group_var, label_var = label)
purrr::as_vector(group_forward$group_var)
group_backward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = TRUE, group_var = group_var, label_var = label) %>%
reverse_group(rev_group = TRUE)
group_levels <- purrr::as_vector(group_backward$group_var)
expect_equal(
group_levels,
c('Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One')
)
})
?bind_rows
devtools::test_active_file()
?pull
devtools::test_active_file()
devtools::test_active_file()
#Set up the working directory to make package
library(devtools)
library(roxygen2)
install_github('y2analytics/orderlabel')
install.packages(c("ggrepel", "Hmisc", "janitor", "lubridate", "openxlsx", "RcppArmadillo"))
install.packages("RcppArmadillo")
#Set up the working directory to make package
library(devtools)
library(roxygen2)
install_github('y2analytics/orderlabel')
#Process documentation
setwd('~/Documents/GitHub/orderlabel/')
document()
install.packages("covr")
usethis::use_github_action("test-coverage")
report()
library(covr)
report()
report()
test_that("add_ages - year_of_survey", {
responses <- tibble::tibble(
year = c(2000, 2001, NA, 2002),
age = c(20, 19, 18, NA),
survey_date = c(
lubridate::ymd('2021, Jan, 1'),
lubridate::ymd('2021, Jan, 1'),
lubridate::ymd('2022, Jan, 1'),
lubridate::ymd('2023, Jan, 1')
),
survey_year = c(2021, 2021, 2022, 2023)
)
test <- get_current_year(year_of_survey = 2000)
expect_equal(test, 2000)
})
# Adding these for testing
devtools::load_all()
test_that("add_ages - year_of_survey", {
responses <- tibble::tibble(
year = c(2000, 2001, NA, 2002),
age = c(20, 19, 18, NA),
survey_date = c(
lubridate::ymd('2021, Jan, 1'),
lubridate::ymd('2021, Jan, 1'),
lubridate::ymd('2022, Jan, 1'),
lubridate::ymd('2023, Jan, 1')
),
survey_year = c(2021, 2021, 2022, 2023)
)
test <- get_current_year(year_of_survey = 2000)
expect_equal(test, 2000)
})
test_that("other_rm - no variable, no group_var", {
df <- data.frame(
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4',
'Brand 5',
'Other, please specify',
'Prefer not to answer...',
'I find none of these brands appealing',
'Brand 6',
'Brand 7 (some description)'
),
result = c(1:10)
)
test <- other_rm(df)
expect_equal(test$label[6], 'Other')
expect_equal(test$label[7], 'Prefer not to say')
expect_equal(test$label[8], 'None of the above')
expect_equal(test$label[10], 'Brand 7')
})
df <- data.frame(
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4',
'Brand 5',
'Other, please specify',
'Prefer not to answer...',
'I find none of these brands appealing',
'Brand 6',
'Brand 7 (some description)'
),
result = c(1:10)
)
test <- other_rm(df)
View(test)
report()
?context
testthat::context()
?testthat::context()
report()
library(covr)
report()
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
