dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
} else {
dataset <- dataset
}
}
#### none_other ####
none_other_fun <- function(
dataset,
none_other,
grouped
) {
if (none_other == TRUE) {
options(warn = -1) # Warning about unknown levels of Other, NOA, PNTS, that's fine
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label,
"Other",
'None of the above',
"Prefer not to say",
after = Inf
)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label),
percent_label = ifelse(
.data$label == .data$label[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
} else {
dataset <- dataset
}
#For grouped
if (grouped == TRUE & none_other == TRUE) {
options(warn=-1) # Warnings here are about levels not existing, but probs won't in most cases
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var,
"Other",
'None of the above',
"Prefer not to say",
after = Inf
)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var),
percent_label = ifelse(
.data$label == .data$label[1] & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
} else {
dataset <- dataset
}
}
#### label_last ####
label_last_fun <- function(
dataset,
label_last,
horizontal,
stacked
) {
label_last_dummy = ifelse(
is.character(label_last) == TRUE,
TRUE,
FALSE
)
# Put label_last last
if (label_last_dummy == TRUE & horizontal == FALSE) {
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label,
label_last,
after = Inf
)
) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
return(dataset)
# Put label_last "first" to be last for horizontal
} else if (label_last_dummy == TRUE & horizontal == TRUE) {
data_rest <- dataset %>% dplyr::filter(.data$label != label_last)
data_label <- dataset %>% dplyr::filter(.data$label == label_last)
data_rest <- data_rest %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label
)
) %>%
dplyr::arrange(label = forcats::fct_rev(.data$label))
dataset <- dplyr::bind_rows(data_label, data_rest) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
# Horizontal and NOT stacked, one more reverse...
if (stacked == 'NULL') {
dataset <- dataset %>%
dplyr::arrange(label = forcats::fct_rev(.data$label)) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
return(dataset)
}
} else {
dataset <- dataset
}
}
#### group_last ####
group_last_fun <- function(
dataset,
group_last,
horizontal,
stacked
) {
group_last_dummy = ifelse(
is.character(group_last) == TRUE,
TRUE,
FALSE
)
# put group_last last
if (group_last_dummy == TRUE & horizontal == FALSE) {
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var,
group_last,
after = Inf
)
) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
return(dataset)
# Put group_last "first" to be last for horizontal
} else if (group_last_dummy == TRUE & horizontal == TRUE) {
data_rest <- dataset %>% dplyr::filter(.data$group_var != group_last)
data_label <- dataset %>% dplyr::filter(.data$group_var == group_last)
data_rest <- data_rest %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var
)
) %>%
dplyr::arrange(group_var = forcats::fct_rev(.data$group_var))
dataset <- dplyr::bind_rows(data_label, data_rest) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
# Horizontal and NOT stacked, one more reverse...
if (stacked == 'NULL') {
dataset <- dataset %>%
dplyr::arrange(group_var = forcats::fct_rev(.data$group_var)) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
return(dataset)
}
} else {
dataset <- dataset
}
}
#### num_fmt ####
num_fmt_orderlabel <- function(
dataset,
num_fmt,
percent_all
) {
if (num_fmt == "percent") {
if (percent_all == TRUE) {
dataset <- dataset %>%
dplyr::mutate(percent_label = stringr::str_c(.data$result * 100, '%'))
}
dataset <- dataset
} else {
dataset <- dataset %>%
dplyr::mutate(percent_label = as.character(.data$result))
}
}
# arrange_by_factor: mschart htmltools updated ordering --------------------------------------
arrange_by_factor <- function(
dataset,
grouped
) {
if (grouped == FALSE) {
dataset <- dataset %>%
dplyr::arrange(.data$label)
} else {
dataset <- dataset %>%
dplyr::arrange(
.data$label,
.data$group_var
)
}
}
text_settings_grouped <- set_text_settings_y2(text_column = group_var)
color_settings_grouped <- set_color_settings_y2(
'black', 'grey', 'red',
'orange', 'yellow', 'green',
'blue', 'purple', 'pink',
color_column = group_var)
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
#rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
# group_last = '$75,000 – 99,999',
# horizontal = TRUE
)
#### (3) Grouped, specific for group only ####
section_grouped_specifics_nolab <- function(
dataset,
specifically_ordered,
inherent_order_label,
group_var,
inherent_order_group,
group_first,
specifically_ordered_group,
rev_group, #fix reversed groups in this section
rev_label
) {
if (specifically_ordered_group == TRUE &
specifically_ordered == FALSE
) {
dataset <- dataset %>%
dplyr::ungroup() %>%
dplyr::mutate(
group_var = forcats::as_factor(.data$group_var),
group_var = as.character.factor(.data$group_var)
)
dataset <- grouped_specific5(dataset, inherent_order_label, inherent_order_group, group_first, rev_label, rev_group)
dataset <- grouped_specific6(dataset, inherent_order_label, inherent_order_group, group_first, rev_label, rev_group)
dataset <- grouped_specific7(dataset, inherent_order_label, inherent_order_group, group_first, rev_label, rev_group)
dataset <- grouped_specific8(dataset, inherent_order_label, inherent_order_group, group_first, rev_label, rev_group)
dataset <- dataset %>% reverse_group(rev_group) %>%
dplyr::mutate(
group_var = forcats::fct_relevel(
.data$group_var,
group_first
)
)
} else {
dataset <- dataset
}
return(dataset)
}
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
#rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
# group_last = '$75,000 – 99,999',
# horizontal = TRUE
)
chart <- ms_grouped_y2(
# direction = 'horizontal'
)
# chart <- ms_grouped_y2(dataset)
print(chart, preview = TRUE)
text_settings_grouped <- set_text_settings_y2(text_column = group_var)
color_settings_grouped <- set_color_settings_y2(
'black', 'grey', 'red',
'orange', 'yellow', 'green',
'blue', 'purple', 'pink',
color_column = group_var)
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
#rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
# group_last = '$75,000 – 99,999',
# horizontal = TRUE
)
chart <- ms_grouped_y2(
# direction = 'horizontal'
)
# chart <- ms_grouped_y2(dataset)
print(chart, preview = TRUE)
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
# group_last = '$75,000 – 99,999',
# horizontal = TRUE
)
chart <- ms_grouped_y2(
# direction = 'horizontal'
)
# chart <- ms_grouped_y2(dataset)
print(chart, preview = TRUE)
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
# rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
group_last = '$75,000 – 99,999',
# horizontal = TRUE
)
chart <- ms_grouped_y2(
# direction = 'horizontal'
)
# chart <- ms_grouped_y2(dataset)
print(chart, preview = TRUE)
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
group_last = '$75,000 – 99,999',
# horizontal = TRUE
)
chart <- ms_grouped_y2(
# direction = 'horizontal'
)
# chart <- ms_grouped_y2(dataset)
print(chart, preview = TRUE)
# GROUPED: rev_group = TRUE
frequencies <- test %>%
group_by(s_income) %>%
mutate(
# s_income = as_factor(s_income) %>% as.character(),
# s_income = as.numeric(s_income)
) %>%
freqs(
s_sex,
factor_group = TRUE
) %>%
order_label(
inherent_order_group = TRUE,
rev_group = TRUE,
group_var = group_var,
group_first = '$50,000 – 74,999',
group_last = '$75,000 – 99,999',
horizontal = TRUE
)
chart <- ms_grouped_y2(
direction = 'horizontal'
)
# chart <- ms_grouped_y2(dataset)
print(chart, preview = TRUE)
devtools::check()
# Adding these for testing
devtools::load_all()
group_forward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = TRUE, group_var = group_var, label_var = label)
purrr::as_vector(group_forward$group_var)
group_backward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = TRUE, group_var = group_var, label_var = label) %>%
reverse_group(rev_group = TRUE)
group_levels <- purrr::as_vector(group_backward$group_var)
expect_equal(
group_levels,
c('Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One')
)
group_levels
ungrouped_df <- tibble::tibble(
variable = rep('X', 5),
value = c('1', '2', '3', '4', '5'),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
)
groups <- tibble::tibble(
group_var = c(rep('Brand 1', 5), rep('Brand 2', 5))
)
grouped_df <- dplyr::bind_rows(ungrouped_df, ungrouped_df) %>%
dplyr::bind_cols(groups)
test <- grouped_df %>% order_label( #these guys are backwards
group_var = group_var,
label_last = 'Three')
last_original <- levels(test$label)
test <- grouped_df %>% order_label( #these guys are backwards
group_var = group_var,
horizontal = TRUE,
label_last = 'Three')
last_horizontal <- levels(test$label)
test <- grouped_df %>% order_label( #these guys are backwards
group_var = group_var,
stacked = 'gg',
label_last = 'Three')
library(survey)
?rake
install.packages(c("credentials", "datawizard", "flextable", "infer", "insight", "knitr", "minqa", "packrat", "pkgload", "prettyunits", "QuickJSR", "RcppArmadillo", "renv", "rmarkdown", "rsconnect", "rstan", "StanHeaders"))
lirary(readxl)
library(readxl)
library(tidyverse)
library(orderlabel)
DATA_PATH <- '~/Y2 Analytics Dropbox/Y2 Analytics Team Folder/Active Projects_SR/Qualtrics BX/Pilot/Wave 4/Data/'
wave1_companies <- read_xlsx(
str_c(
DATA_PATH,
'Wave 4/Data/Wave 1 Companies.xlsx'
)
)
library(readxl)
library(tidyverse)
DATA_PATH <- '~/Y2 Analytics Dropbox/Y2 Analytics Team Folder/Active Projects_SR/Qualtrics BX/Pilot/'
wave1_companies <- read_xlsx(
str_c(
DATA_PATH,
'Wave 4/Data/Wave 1 Companies.xlsx'
)
)
wave2_companies <- read_xlsx(
str_c(
DATA_PATH,
'Wave 4/Data/Wave 2 Companies.xlsx'
)
)
inw1_notw2 <- wave1_companies %>%
anti_join(wave2_companies, by = 'company')
?anti_join
View(wave1_companies)
View(wave2_companies)
View(wave1_companies)
inw2_notw1 <- wave2_companies %>%
anti_join(wave1_companies, by = 'company')
inw1_notw2 <- wave1_companies %>%
anti_join(wave2_companies, by = 'company') %>%
print()
inw2_notw1 <- wave2_companies %>%
anti_join(wave1_companies, by = 'company') %>%
print()
wave1_companies <- wave1_companies %>%
mutate(
company = str_to_lower(company)
)
wave2_companies <- wave2_companies %>%
mutate(
company = str_to_lower(company)
)
inw1_notw2 <- wave1_companies %>%
anti_join(wave2_companies, by = 'company') %>%
print()
inw2_notw1 <- wave2_companies %>%
anti_join(wave1_companies, by = 'company') %>%
print()
View(wave1_companies)
View(inw1_notw2)
View(wave1_companies)
library(y2artisan)
?ms_line_y2
