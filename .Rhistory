inherent_order_label == FALSE) {
freqs1 <- dataset %>%
dplyr::filter(
.data$label == label_first
) %>%
dplyr::arrange(
dplyr::desc(.data$result)
) %>%
reverse_label_unordered(rev_label) %>%
reverse_group(rev_group)
group1 <- freqs1$group_var[1]
freqs2 <- dataset %>%
dplyr::filter(
.data$label != label_first &
.data$group_var == group1
) %>%
dplyr::arrange(
dplyr::desc(.data$result)
)
freqs3 <- dataset %>%
dplyr::filter(
.data$label != label_first &
.data$group_var != group1
)
dataset <- dplyr::bind_rows(freqs1, freqs2, freqs3) %>%
dplyr::mutate(
percent_label = ifelse(
.data$label == label_first & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
),
label = forcats::fct_inorder(.data$label)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var)
)
} else {
dataset <- dataset
}
}
#### Grouped Unordered 2 ####
grouped_unordered2 <- function(
dataset,
inherent_order_label,
inherent_order_group,
specifically_ordered,
label_first,
rev_group
) {
if (specifically_ordered == TRUE &
inherent_order_label == TRUE) { #Arranging for specific label first
freqs1 <- dataset %>%
dplyr::filter(
.data$label == label_first
) %>%
dplyr::arrange(
.data$value,
dplyr::desc(.data$result),
.data$group_var
) %>% reverse_group(rev_group)
group1 <- freqs1$group_var[1]
freqs2 <- dataset %>%
dplyr::filter(
.data$label != label_first &
.data$group_var == group1
) %>%
dplyr::arrange(
.data$value
)
freqs3 <- dataset %>%
dplyr::filter(
.data$label != label_first &
.data$group_var != group1
)
dataset <- dplyr::bind_rows(freqs1, freqs2, freqs3) %>%
dplyr::mutate(
percent_label = ifelse(
.data$label == label_first & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
),
label = forcats::fct_inorder(.data$label)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var)
)
} else {
dataset <- dataset
}
}
#### Grouped Unordered 3 ####
grouped_unordered3 <- function(
dataset,
inherent_order_label,
inherent_order_group,
specifically_ordered,
rev_group,
rev_label
) {
if (inherent_order_label == FALSE &
specifically_ordered == FALSE
) {
freqs1 <- dataset %>%
dplyr::arrange(
dplyr::desc(.data$result)
)  %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label)
) %>%
reverse_label_unordered(rev_label) %>%
dplyr::filter(
.data$label == .data$label[1]
) %>% reverse_group(rev_group)
group1 <- freqs1$label[1]
freqs2 <- dataset %>%
dplyr::filter(
.data$label != group1
) %>%
dplyr::arrange(
dplyr::desc(.data$result)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label)
) %>% reverse_label_unordered(rev_label)
dataset <- dplyr::bind_rows(freqs1, freqs2) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var),
percent_label = ifelse(
.data$label == group1 & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label)
)
} else {
dataset <- dataset
}
}
#### Grouped Unordered 4 ####
grouped_unordered4 <- function(
dataset,
inherent_order_label,
inherent_order_group,
specifically_ordered,
rev_group
) {
if (inherent_order_label == TRUE &
specifically_ordered == FALSE
) {
dataset <- dataset %>%
dplyr::arrange(
.data$value,
dplyr::desc(.data$result),
.data$group_var
) %>% reverse_group(rev_group) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label),
percent_label = ifelse(
.data$label == .data$label[1] & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var)
)
} else {
dataset <- dataset
}
}
#### topbox ####
topbox <- function(
dataset,
topbox = NULL
) {
if (is.null(topbox) == FALSE) {
top2box <- topbox
dataset <- spreading_top2(dataset, top2box)
dataset <- ordering_top2(dataset)
} else { # is.null(topbox)
dataset <- dataset
}
}
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
. <- NULL
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
) %>%
dplyr::mutate(value = as.character(.data$value))
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
) %>%
tidyr::gather(
key = "value",
value = "result",
-.data$group_var,
-.data$topbox
) %>%
dplyr::mutate(value = as.character(.data$value))
dataset <- dplyr::left_join(
test1,
test2
)
}
### ordering_top2
ordering_top2 <- function(dataset) {
dataset <- dataset %>%
dplyr::arrange(
dplyr::desc(.data$topbox)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label)
) %>%
dplyr::mutate(
percent_label = ifelse(
.data$label == .data$label[1] & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
}
#### Horizontal ####
horizontal_chart <- function(
dataset,
horizontal,
grouped
) {
if (horizontal == TRUE) {
if (grouped == FALSE) {
dataset <- dataset %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
)
} else { #grouped == TRUE
dataset <- dataset %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
) %>%
dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
}
} else { #horizontal == FALSE
dataset <- dataset
}
}
#### GG Stacked ####
stacked_chart <- function(
dataset,
stacked,
grouped,
inherent_order_group,
specifically_ordered
) {
if (stacked == 'gg' &
grouped == FALSE) {
dataset <- dataset  %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
)
} else if (stacked == 'gg' &
grouped == TRUE) {
dataset <- dataset %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
) %>%
dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
} else {
dataset <- dataset
}
}
#### MS Stacked ####
stacked_chart_ms <- function(
dataset,
stacked,
grouped,
inherent_order_group,
specifically_ordered_group
) {
if (stacked == 'ms' &
grouped == TRUE) {
dataset <- dataset %>%
dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
} else {
dataset <- dataset
}
}
#### none_other ####
none_other <- function(
dataset,
none_other,
grouped
) {
options(warn = -1) # Warning about unknown levels of Other, NOA, PNTS, that's fine
if (none_other == TRUE) {
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label,
"Other",
'None of the above',
"Prefer not to say",
after = Inf
)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label),
percent_label = ifelse(
.data$label == .data$label[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
} else {
dataset <- dataset
}
#For grouped
if (grouped == TRUE & none_other == TRUE) {
options(warn=-1) # Warnings here are about levels not existing, but probs won't in most cases
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var,
"Other",
'None of the above',
"Prefer not to say",
after = Inf
)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var),
percent_label = ifelse(
.data$label == .data$label[1] & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
} else {
dataset <- dataset
}
}
#### label_last ####
label_last_fun <- function(
dataset,
label_last,
horizontal,
stacked
) {
label_last_dummy = ifelse(
is.character(label_last) == TRUE,
TRUE,
FALSE
)
# Put label_last last
if (label_last_dummy == TRUE & horizontal == FALSE) {
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label,
label_last,
after = Inf
)
) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
# Put label_last "first" to be last for horizontal
} else if (label_last_dummy == TRUE & horizontal == TRUE) {
data_rest <- dataset %>% dplyr::filter(.data$label != label_last)
data_label <- dataset %>% dplyr::filter(.data$label == label_last)
data_rest <- data_rest %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label
)
) %>%
dplyr::arrange(label = forcats::fct_rev(.data$label))
dataset <- dplyr::bind_rows(data_label, data_rest) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
# Horizontal and NOT stacked, one more reverse...
if (stacked == 'NULL') {
dataset <- dataset %>%
dplyr::arrange(label = forcats::fct_rev(.data$label)) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
return(dataset)
}
} else {
dataset <- dataset
}
}
#### group_last ####
group_last_fun <- function(
dataset,
group_last,
horizontal,
stacked
) {
group_last_dummy = ifelse(
is.character(group_last) == TRUE,
TRUE,
FALSE
)
# put group_last last
if (group_last_dummy == TRUE & horizontal == FALSE) {
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var,
group_last,
after = Inf
)
) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
# Put group_last "first" to be last for horizontal
} else if (group_last_dummy == TRUE & horizontal == TRUE) {
data_rest <- dataset %>% dplyr::filter(.data$group_var != group_last)
data_label <- dataset %>% dplyr::filter(.data$group_var == group_last)
data_rest <- data_rest %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var
)
) %>%
dplyr::arrange(group_var = forcats::fct_rev(.data$group_var))
dataset <- dplyr::bind_rows(data_label, data_rest) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
# Horizontal and NOT stacked, one more reverse...
if (stacked == 'NULL') {
dataset <- dataset %>%
dplyr::arrange(group_var = forcats::fct_rev(.data$group_var)) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
return(dataset)
}
} else {
dataset <- dataset
}
}
#### num_fmt ####
num_fmt_orderlabel <- function(
dataset,
num_fmt
) {
if (num_fmt == "percent") {
dataset <- dataset
} else {
dataset <- dataset %>%
dplyr::mutate(percent_label = as.character(.data$result))
}
}
# arrange_by_factor: mschart htmltools updated ordering --------------------------------------
arrange_by_factor <- function(
dataset,
grouped
) {
if (grouped == FALSE) {
dataset <- dataset %>%
dplyr::arrange(.data$label)
} else {
dataset <- dataset %>%
dplyr::arrange(
.data$label,
.data$group_var
)
}
}
frequencies <- responses %>%
group_by(county_6) %>%
freqs(
s_overall_county,
nas = FALSE,
nas_group = FALSE,
wt = weights_final
)
frequencies <- responses %>%
group_by(county_6) %>%
freqs(
s_overall_county,
nas = FALSE,
nas_group = FALSE,
wt = weights_final
) %>%
#ungroup() %>%
filter(label == 'Right Direction') %>%
mutate(label = group_var) %>%
order_label() # problem with order_label here if not ungrouped... whaaaat
install_github('nick-moffitt/orderlabel')
#Set up the working directory to make package
library(devtools)
library(roxygen2)
install_github('nick-moffitt/orderlabel')
